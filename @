package main

import (
    "encoding/json"
    "context"
    "database/sql"
    "time"
    "github.com/heroiclabs/nakama-common/runtime"
    "github.com/aws/aws-sdk-go/aws" 
    "github.com/aws/aws-sdk-go/aws/session" 
    "github.com/aws/aws-sdk-go/service/s3"
    "github.com/aws/aws-sdk-go/aws/awserr"
//    "github.com/aws/aws-sdk-go/service/s3/s3manager"
  )



// init nakama
func InitModule(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, initializer runtime.Initializer) error {

// initialize functions
  if err := initializer.RegisterRpc("list_files", listFiles); err != nil {
        logger.Error("Unable to register: %v", err)
        return err
    }

  if err := initializer.RegisterRpc("upload_file", uploadFile); err != nil {
        logger.Error("Unable to register: %v", err)
        return err
    }

  if err := initializer.RegisterRpc("download_file", downloadFile); err != nil {
        logger.Error("Unable to register: %v", err)
        return err
    }

  if err := initializer.RegisterRpc("current_users", currentUsers); err != nil {
        logger.Error("Unable to register: %v", err)
        return err
    }




  logger.Info("Hello World!")
    return nil
}


const (
	AWS_S3_REGION = "eu-central-1"
	AWS_S3_BUCKET = "artworldstudioplay"
)

// session start
var sess = connectAWS()

func connectAWS() *session.Session {
	sess, err := session.NewSession(&aws.Config{Region: aws.String(AWS_S3_REGION)})
	if err != nil {
		panic(err)
	}
	return sess
}

//session end


// list all files

func listFiles(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, payload string) (string, error) {

svc := s3.New(sess)
input := &s3.ListObjectsInput{
    Bucket: aws.String(AWS_S3_BUCKET),
}

result, err := svc.ListObjects(input)
if err != nil {
    if aerr, ok := err.(awserr.Error); ok {
        switch aerr.Code() {
        case s3.ErrCodeNoSuchBucket:
            logger.Error(s3.ErrCodeNoSuchBucket, aerr.Error())
        default:
            logger.Error(aerr.Error())
        }
    } else {
        // Print the error, cast err to awserr.Error to get the Code and
        // Message from an error.
        logger.Error(err.Error())
    }
}


response, err := json.Marshal(result)
  if err != nil {
    return "", err
  }



  return string(response), nil
}


// download file

func downloadFile(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, payload string) (string, error) {

  var input map[string]string
  err := json.Unmarshal([]byte(payload), &input)
  if err != nil {
    return "", err
  }



    // Create S3 service client
    svc := s3.New(sess)

    req, _ := svc.GetObjectRequest(&s3.GetObjectInput{
        Bucket: aws.String(AWS_S3_BUCKET),
        Key:    aws.String(input["url"]),
    })
    url, err := req.Presign(15 * time.Minute)


   if err != nil {
        logger.Error("Failed to generate a pre-signed url: ", err)
        return "error", err
    }


    // Display the pre-signed url

 // logger.Error(string(json_data) , url)

 response := `{ "url" : "` + url + `"}`


  return response , nil


  }


// upload file

func uploadFile(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, payload string) (string, error) {

  var input map[string]string
  err := json.Unmarshal([]byte(payload), &input)
  if err != nil {
    return "", err
  }

  userId, ok := ctx.Value(runtime.RUNTIME_CTX_USER_ID).(string)
  if !ok {
   // User ID not found in the context.
  }


  var location = input["type"] + "/" + userId + "/" + input["filename"]

     svc := s3.New(sess)
    

req, _ := svc.PutObjectRequest(&s3.PutObjectInput{
        Bucket: aws.String(AWS_S3_BUCKET),
        Key:    aws.String(location),
    })
    url, err := req.Presign(15 * time.Minute)



   if err != nil {
        logger.Error("Failed to generate a pre-signed url: ", err)
        return "error", err
    }



    response := `{ "url" : "` + url + `", "location" :"` + location + `"}`


  return response , nil


  }



func currentUsers(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, payload string) (string, error) {
//  svc := s3.New(sess)


  mode := uint8(123)
  label := "Avatar Position"
  includeHidden := true
  includeNotHidden := true

  members, err := nk.StreamUserList(mode, "", "", label, includeHidden, includeNotHidden)
  if err != nil {
  logger.Error("error!", err)
  }


//  var memberList []string
  
  for _, m := range members {
    logger.Error("Found user: %s\n", m.GetUserId());
//    memberList = append(memberList, m.GetUserId())


    /*    
    req, _ := svc.GetObjectRequest(&s3.GetObjectInput{
      Bucket: aws.String(AWS_S3_BUCKET),
      Key:    aws.String("/avatar/" + m.GetUserId() + ".jpg"),
    })

    url, err := req.Presign(15 * time.Minute)
   if err != nil {
        logger.Error("Failed to generate a pre-signed url: ", err)
     //   return "error", err
    }
*/
  }

  response, err := json.Marshal(members)

  //response, err := json.Marshal(memberList)
  if err != nil {
    return "", err
  }


  return string(response), nil
   nk.UsersGetAvatarUrl()
  }


